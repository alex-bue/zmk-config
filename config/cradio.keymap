// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Timing definitions
#define CAPS_COMBO_MS 125
#define VERT_COMBO_MS 75
#define TRI_COMBO_MS  50
#define ROLL_COMBO_MS 25

// Home row mods macro
#define HRML(k1,k2,k3,k4) &ht LCTRL k1  &ht LALT k2  &ht LGUI k3  &ht LSFT k4
#define HRMR(k1,k2,k3,k4) &ht LSFT k1   &ht LGUI k2  &ht LALT k3  &ht LCTRL k4

// Layer definitions
#define BASE 0
#define SYM 1
#define NUM 2
#define NAV 3
#define TRI 4

// Key positions reference
//   ╭────────────────────╮ ╭────────────────────╮
//   │  0   1   2   3   4 │ │  5   6   7   8   9 │
//   │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
//   │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
//   ╰───────────╮ 30  31 │ │ 32  33 ╭───────────╯
//               ╰────────╯ ╰────────╯

/ {
    combos {
        compatible = "zmk,combos";
        combo_bspc {
          timeout-ms = <VERT_COMBO_MS>;
          key-positions = <7 8>;
          bindings = <&kp BSPC>;
        };

        /* White Space */
        combo_del {
          timeout-ms = <VERT_COMBO_MS>;
          key-positions = <17 18>;
          bindings = <&kp DEL>;
        };
        combo_tab {
          timeout-ms = <VERT_COMBO_MS>;
          key-positions = <1 2>;
          bindings = <&kp TAB>;
        };
        combo_esc {
          timeout-ms = <VERT_COMBO_MS>;
          key-positions = <11 12>;
          bindings = <&kp ESC>;
        };

        /* System */
        combo_alfred {
          timeout-ms = <VERT_COMBO_MS>;
          key-positions = <11 12 13>;
          bindings = <&kp LG(SPACE)>;
          layers = <0>;
        };

        /* Caps word */
        combo_caps_word {
          timeout-ms = <VERT_COMBO_MS>;
          key-positions = <13 16>;
          bindings = <&caps_word>;
        };
    };
};

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };

        td_bootloader: tap_dance_reset {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&bootloader>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
            &kp Q      &kp W      &kp E      &kp R         &kp T              &kp Y          &kp U      &kp I      &kp O      &kp P
            HRML(A,        S,         D,         F)        &kp G              &kp H          HRMR(J,        K,         L,        SQT)
            &ht RALT Z &kp X      &kp C      &kp V         &kp B              &kp N          &kp M      &kp COMMA  &kp DOT    &ht RALT FSLH
                                             &lt NAV TAB   &lt SYM ESC        &lt NUM ENTER  &lt NAV SPACE
            >;
        };

        symbols_layer {
            bindings = <
            &kp EXCL   &kp AT     &kp HASH   &kp DOLLAR  &kp PERCENT          &kp EQUAL  &kp GRAVE  &kp LPAR  &kp RPAR   &kp PLUS
            &kp LCTRL  &kp LALT   &kp LGUI   &kp LSFT    &kp CARET            &kp ASTRK  &kp COLON  &kp LBKT  &kp RBKT   &kp MINUS
            &trans     &trans     &kp BSLH   &kp PIPE    &kp AMPS             &kp TILDE  &kp SEMI   &kp LBRC  &kp RBRC   &kp UNDER
                                             &trans      &trans               &trans     &trans
            >;
        };

        numbers_layer {
            bindings = <
            &kp N1     &kp N2    &kp N3      &kp N4    &kp N5                 &kp N6     &kp N7     &kp N8    &kp N9     &kp N9
            &kp LCTRL  &kp LALT  &kp LGUI    &kp LSFT  &trans                 &trans     &kp LSFT   &kp LGUI  &kp LALT   &kp LCTRL
            &trans     &trans    &trans      &trans    &trans                 &trans     &trans     &trans    &trans     &trans
                                             &trans    &trans                 &trans     &trans
            >;
        };

        navigation_layer {
            bindings = <
            &kp LA(N1)  &kp LA(N2) &kp LA(N3) &kp LA(N4)  &kp LA(N5)          &kp C_PREV &kp C_VOL_DN &kp C_VOL_UP  &kp C_NEXT  &kp C_MUTE
            &kp LCTRL   &kp LALT   &kp LGUI   &kp LSFT    &trans              &kp LEFT   &kp DOWN     &kp UP        &kp RIGHT   &kp C_PLAY_PAUSE
            &trans      &trans     &trans     &trans      &trans              &trans     &kp C_BRI_DN &kp C_BRI_UP  &trans      &trans
                                              &trans      &trans              &trans     &trans
            >;
        };

        tri_layer {
            bindings = <
            &trans          &trans  &trans  &trans  &trans    &kp C_PREV    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT    &kp C_MUTE
            &trans          &trans  &trans  &trans  &trans    &bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3
            &td_bootloader  &trans  &trans  &trans  &trans    &out OUT_TOG  &kp C_BRI_UP  &kp C_BRI_DN  &trans        &td_bootloader
                                            &trans  &trans    &trans        &trans
            >;
        };
    };
};
