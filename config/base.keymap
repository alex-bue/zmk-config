// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

// ZMK includes
#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi> // Requires auto-layer module (urob).
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Urob zmk helper includes
#include "zmk-helpers/helper.h"
#include "zmk-helpers/unicode-chars/german.dtsi"

// Layer definitions
#define BASE_WIN 0
#define BASE_MAC 1
#define SYM 2
#define NUM 3
#define NAV 4
#define FN 5
#define WM 6
#define SYS 7

// Personal includes
#include "includes/behaviors_homerow_mods.dtsi"
#include "includes/combos.dtsi"
#include "includes/macros.dtsi"
#include "includes/leader.dtsi"

&sk {
  release-after-ms = <900>;
  quick-release;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NAV FN>;
            then-layer = <SYS>;
        };
    };
};

/ {
    behaviors {
        // Magic Shift - Tap: Sticky shift | Double-tap: Caps word | Hold: Shift
        magic_shift_tap: magic_shift_tap {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&sk LSHFT>, <&caps_word>;
        };

        magic_shift: magic_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&kp>, <&magic_shift_tap>;
        };

        // Smart Num - Tap: Smart num layer | Tap Tap (hold): mo num layer | Hold: Nav layer
        smart_num: smart_num {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <
                &ht_mo_numword NAV NUM  // Hold: nav-layer, Tap: num_word
                &mo NUM               // Double tap: num-layer
            >;
        };

        ht_mo_numword: ht_mo_numword {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&num_word>; 
        };

        // Tap: comma | Shift: semicolon | Ctrl+Shift: <
        comma_morph: comma_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&comma_inner_morph>;
            mods = <(MOD_LSFT | MOD_RSFT)>;
        };

        comma_inner_morph: comma_inner_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SEMICOLON>, <&kp LT>;
            mods = <(MOD_LCTL | MOD_RCTL)>;
        };

        // Tap: dot | Shift: colon | Ctrl+Shift: >
        dot_morph: dot_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&dot_inner_morph>;
            mods = <(MOD_LSFT | MOD_RSFT)>;
        };

        dot_inner_morph: dot_inner_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp GREATER_THAN>;
            mods = <(MOD_LCTL | MOD_RCTL)>;
        };

        // Tap: ( | Shift: <
        lpar_lt: lpar_lt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp LT>;
            mods = <(MOD_LSFT | MOD_RSFT)>;
        };

        // Tap: ) | Shift: >
        rpar_gt: rpar_gt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RPAR>, <&kp GT>;
            mods = <(MOD_LSFT | MOD_RSFT)>;
        };

        // Tap: backspace | LShift: delete
        bs_del: bs_del {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;
            mods = <(MOD_LSFT | MOD_RSFT)>;
        };

        // Tap dance: single tap = copy | double tap = cut
        copy_cut: copy_cut {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp LC(INS)>, <&kp LC(X)>;
            tapping-term-ms = <200>;
        };

        copy_cut_mac: copy_cut_mac {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp LG(C)>, <&kp LG(X)>;
            tapping-term-ms = <200>;
        };

        td_bootloader: td_bootloader {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&bootloader>;
        };
    };
};

/ { 

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
            &kp Q           &kp W         &kp E         &kp R                &kp T                &kp Y           &kp U                &kp I         &kp O         &kp P
            &hm_l LCTRL A   &hm_l LALT S  &hm_l LGUI D  &hm_shift_l LSHFT F  &kp G                &kp H           &hm_shift_r LSHFT J  &hm_r RGUI K  &hm_r LALT L  &hm_r LCTRL SQT
            &lt WM Z        &kp X         &kp C         &kp V                &kp B                &kp N           &kp M                &comma_morph  &dot_morph    &kp FSLH
                                                        &smart_num           &magic_shift LSHFT 0 &lt SYM SPACE   &lt FN ENTER
            >;
        };

        default_layer_mac {
            bindings = <
            &kp Q           &kp W         &kp E         &kp R               &kp T                 &kp Y           &kp U                &kp I         &kp O         &kp P
            &hm_l LCTRL A   &hm_l LALT S  &hm_l LGUI D  &hm_shift_l LSHFT F &kp G                 &kp H           &hm_shift_r LSHFT J  &hm_r RGUI K  &hm_r LALT L  &hm_r LCTRL SQT
            &lt WM Z        &kp X         &kp C         &kp V               &kp B                 &kp N           &kp M                &comma_morph  &dot_morph    &kp FSLH
                                                        &smart_num          &magic_shift LSHFT 0  &lt SYM SPACE   &lt FN ENTER
            >;
        };

        symbols_layer {
            bindings = <
            &trans     &kp LT     &kp GT     &kp BSLH    &kp GRAVE         &kp AMPS  &kp GRAVE  &kp LPAR  &kp RPAR   &kp PERCENT
            &kp EXCL   &kp MINUS  &kp PLUS   &kp EQUAL   &kp HASH          &kp PIPE  &kp COLON  &kp LBKT  &kp RBKT   &kp DOLLAR
            &trans     &kp SLASH  &kp ASTRK  &kp CARET   &kp UNDER         &kp TILDE &kp SEMI   &kp LBRC  &kp RBRC   &kp AT
                                             &trans      &trans            &trans    &trans
            >;
        };

        num_layer {
            bindings = <
            &trans     &trans    &trans     &trans    &trans         &trans   &kp N7  &kp N8  &kp N9  &kp COMMA
            &trans     &trans    &trans     &trans    &trans         &trans   &kp N4  &kp N5  &kp N6  &kp N0
            &trans     &trans    &trans     &trans    &trans         &trans   &kp N1  &kp N2  &kp N3  &kp DOT
                                            &trans    &kp K_CANCEL   &trans   &trans
            >;
        };

        navigation_layer {
            bindings = <
            &kp LA(N1)     &kp LA(N2)  &kp LA(N3) &kp LA(N4)  &kp LA(N5)          &kp HOME   &kp PG_DN &kp PG_UP  &kp BSPC    &kp DEL
            &kp LCTRL      &kp LALT    &kp LGUI   &kp LSHFT   &trans              &kp LEFT   &kp DOWN  &kp UP     &kp RIGHT   &kp BSPC
            &td_bootloader &trans      &trans     &trans      &trans              &kp END    &trans    &trans     &trans      &trans
                                                  &trans      &trans              &trans     &trans
            >;
        };

       fn_layer {
            bindings = <
            &kp F12      &kp F7     &kp F8     &kp F9     &trans        &trans      &kp C_PLAY_PAUSE &kp C_MUTE    &trans     &trans
            &kp F11      &kp F4     &kp F5     &kp F6     &trans        &kp C_PREV  &kp C_VOL_DN     &kp C_VOL_UP  &kp C_NEXT &trans
            &kp F10      &kp F1     &kp F2     &kp F3     &trans        &trans      &kp C_BRI_DN     &kp C_BRI_UP  &trans     &td_bootloader
                                               &trans     &trans        &trans      &trans
            >;
        };

        wm_layer {
            bindings = <
            &trans     &trans    &trans    &trans     &trans    &kp LA(TAB)      &trans      &trans      &trans      &kp LA(LS(EQUAL))
            &kp LCTRL  &kp LALT  &kp LGUI  &kp LSHFT  &trans    &trans           &kp LA(N1)  &kp LA(N2)  &kp LA(N3)  &kp LA(LS(MINUS))
            &trans     &trans    &trans    &trans     &trans    &trans           &kp LA(N4)  &kp LA(N5)  &kp LA(N6)  &kp LA(LS(N0))
                                           &trans     &trans    &kp LS(LA(SEMI)) &trans
            >;
        };

        sys_layer {
            bindings = <
            &tog BASE_MAC   &trans  &trans  &trans  &trans    &trans        &trans        &trans        &trans        &trans
            &trans          &trans  &trans  &trans  &trans    &bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3
            &td_bootloader  &trans  &trans  &trans  &trans    &out OUT_TOG  &trans        &trans        &trans        &td_bootloader
                                            &trans  &trans    &trans        &trans
            >;
        };
    };
};
